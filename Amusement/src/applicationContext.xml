<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/aop
		 http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd">
     <!-- 扫描包 -->
     <context:component-scan base-package="com.web.dao,com.web.biz"></context:component-scan>
         
      <!-- 读取jdbc.properties文件 -->
     <context:property-placeholder location="classpath:jdbc.properties"/>
     
    <!-- 配置数据源     spring提供的jdbc数据源 、c3p0等
    -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${url}"></property>
        <property name="driverClass" value="${driver}"></property>
        <property name="user" value="${user}"></property>
        <property name="password" value="${password}"></property>
        
        <!-- 连接池的相关属性 -->
        <!-- 指定连接池中保留的最大连接数. Default:15-->  
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>  
        <!-- 指定连接池中保留的最小连接数-->  
        <property name="minPoolSize" value="${jdbc.minPoolSize}"/>  
        <!-- 指定连接池的初始化连接数  取值应在minPoolSize 与 maxPoolSize 之间.Default:3-->  
        <property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>  
        <!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0-->  
        <property name="maxIdleTime" value="${jdbc.maxIdleTime}"/>  
        <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3-->  
        <property name="acquireIncrement" value="${jdbc.acquireIncrement}"/>  
        <!-- JDBC的标准,用以控制数据源内加载的PreparedStatements数量。  
        但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0-->  
        <property name="maxStatements" value="${jdbc.maxStatements}"/>  
        <!-- 每60秒检查所有连接池中的空闲连接.Default:0 -->  
        <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"/> 
    </bean>
    
    <!-- session工厂 -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
         <!-- 数据源 -->
         <property name="dataSource" ref="dataSource"></property>
         
         <!-- 扫描实体类 -->
         <property name="packagesToScan" value="com.web.entity"></property>
     
          <!-- hibernate的其他属性 -->
          <property name="hibernateProperties">
              <props>
                   <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                   <prop key="hibernate.show_sql">true</prop>
                   <prop key="hibernate.format_sql">true</prop>
                   <prop key="hibernate.hbm2ddl.auto">update</prop>
                   <prop key="javax.persistence.validation.mode">none</prop>
              </props>
          </property>
    </bean>
    
    <!-- spring两大核心：IOC(DI)、AOP（面向切面编程)(事务管理，日志管理，权限管理等) 
    <property name="sessionFactory"  ref="sessionFactory"></property>
    -->
    <!-- 事务管理的配置 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager"
        p:sessionFactory-ref="sessionFactory">
        
    </bean>
    
    <!-- 配置advice -->
    <tx:advice id="myAdvice" transaction-manager="transactionManager">
         <tx:attributes>
             <!-- 以add开头的方法都要进行事务管理 -->
             <tx:method name="add*" propagation="REQUIRED"/>
             <tx:method name="update*" propagation="REQUIRED"/>
             <tx:method name="delete*" propagation="REQUIRED"/>
             <tx:method name="save*" propagation="REQUIRED"/>
             <tx:method name="drop*" propagation="REQUIRED"/>
          
             <!-- 这些方法都要进行事务管理，但是只能做读取操作 -->
             <tx:method name="query*" propagation="REQUIRED" read-only="true"/>
             <tx:method name="find*" propagation="REQUIRED" read-only="true"/>
             <tx:method name="select*" propagation="REQUIRED" read-only="true"/>
         </tx:attributes>
    </tx:advice>
    
    <!-- 配置aop -->
    <aop:config proxy-target-class="true">
          <!-- aop的切入点 -->
         <aop:pointcut expression="execution(* com.web.biz..*(..))" id="myPoint"/>
         
         <aop:advisor advice-ref="myAdvice" pointcut-ref="myPoint"/>
    </aop:config>
</beans>