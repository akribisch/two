<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
xmlns:context="http://www.springframework.org/schema/context"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
 xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:util="http://www.springframework.org/schema/util" 
    xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
    xmlns:cache="http://www.springframework.org/schema/cache"  
    xsi:schemaLocation="  
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context.xsd  
    http://www.springframework.org/schema/beans  
    http://www.springframework.org/schema/beans/spring-beans.xsd  
    http://www.springframework.org/schema/tx  
    http://www.springframework.org/schema/tx/spring-tx.xsd  
    http://www.springframework.org/schema/jdbc  
    http://www.springframework.org/schema/jdbc/spring-jdbc-4.2.5.xsd  
    http://www.springframework.org/schema/cache  
    http://www.springframework.org/schema/cache/spring-cache-4.2.5.xsd  
    http://www.springframework.org/schema/aop  
    http://www.springframework.org/schema/aop/spring-aop.xsd  
    http://www.springframework.org/schema/util  
    http://www.springframework.org/schema/util/spring-util.xsd">
  
  <!-- 扫描包 -->
  <context:component-scan base-package="com.web.dao,com.web.biz,com.web.proxy,com.web.controller"></context:component-scan>
  
  <!-- IOC注解 -->
  <context:annotation-config></context:annotation-config>
  
  <!-- aop的注解 -->
  <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
  
  <!-- 配置数据源 -->
  <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
       <!-- 数据库驱动 -->
       <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
       
       <!-- 连接数据库的url -->
       <property name="url" value="jdbc:mysql://localhost:3306/ake"></property>
       
       <!-- 用户名 -->
       <property name="username" value="akr"></property>
  
       <!-- 密码 -->
       <property name="password" value="admins"></property>
  </bean>
    
  <!-- 配置session工厂      p:dataSource-ref="dataSource"
     相当于  <property name="dataSource" ref="dataSource"></property>-->
  <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
      p:dataSource-ref="dataSource">
      <!-- <property name="dataSource" ref="dataSource"></property> -->
      
      <!-- 扫描实体类  -->
      <property name="packagesToScan" value="com.web.entity"></property>
      
      <!-- 配置hibernate的其他属性 -->
      <property name="hibernateProperties">
          <props>
                <!-- 数据库方言 -->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop> 
                
                <!-- 是否显示sql语句 -->
                <prop key="hibernate.show_sql">true</prop>
                
                <!-- 是否打印格式规范的sql语句 -->
                <prop key="hibernate.format_sql">true</prop>
                
                <!--是否自动生成数据库表  -->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                
                <!-- 实体的验证模式 -->
                <prop key="javax.persistence.validation.mode">none</prop>
          </props>
      </property>
  </bean>
  
  <!-- 配置事务管理 --> 
  <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
       <property name="sessionFactory" ref="sessionFactory"></property>
  </bean>
  
  <!-- 配置通知
    PROPAGATION_REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
	PROPAGATION_SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。
	PROPAGATION_MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。
	PROPAGATION_REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。
	PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
	PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。
	PROPAGATION_NESTED：支持当前事务，如果当前事务存在，则执行一个嵌套事务（还不是太明白），如果当前没有事务，就新建一个事务。
	TransactionDefinition中定义的隔离（isolation）级别，有5种：
   -->
  <tx:advice transaction-manager="transactionManager" id="txAdvice">
       <tx:attributes>
            <!-- 以add开头的方法都要进行事务管理 -->
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="modify*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
           
            <!-- 查询  需要用到事务    只能读取 -->
            <tx:method name="query*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="select*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED" read-only="true"/>
       </tx:attributes>
  </tx:advice>
  
  <!-- 配置aop -->
  <aop:config proxy-target-class="true">
        <!-- 配置切入点    expression：表达式     execution：执行-->
        <aop:pointcut expression="execution(* com.web.biz..*.*(..))" id="bizMethod"/>
        
        <!-- 通知进行事务管理 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="bizMethod"/>
  </aop:config>
       
 </beans>